import { CanvasWhiteboardShape } from './canvas-whiteboard-shape';
import { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';
export class FreeHandShape extends CanvasWhiteboardShape {
    constructor(positionPoint, options) {
        super(positionPoint, options);
        this.linePositions = [];
    }
    getShapeName() {
        return 'FreeHandShape';
    }
    draw(context) {
        Object.assign(context, this.options);
        context.beginPath();
        context.moveTo(this.positionPoint.x, this.positionPoint.y);
        // Draw a dot
        context.lineTo(this.positionPoint.x + 1, this.positionPoint.y + 1);
        // Normal fastest free hand drawing
        // this.linePositions.forEach((linePosition) => {
        //     context.lineTo(linePosition.x, linePosition.y);
        // });
        // Quadratic curves drawing
        let i = 0;
        while (i < this.linePositions.length) {
            if (this.linePositions.length - i > 2) {
                const controlPoint1 = this.linePositions[i];
                const controlPoint2 = this.linePositions[i + 1];
                const endPoint = this.linePositions[i + 2];
                context.bezierCurveTo(controlPoint1.x, controlPoint1.y, controlPoint2.x, controlPoint2.y, endPoint.x, endPoint.y);
                i += 2;
            }
            else {
                const linePosition = this.linePositions[i];
                context.lineTo(linePosition.x, linePosition.y);
                i += 1;
            }
        }
        context.stroke();
    }
    drawPreview(context) {
        this.positionPoint = new CanvasWhiteboardPoint(2, 2);
        this.linePositions = [
            new CanvasWhiteboardPoint(context.canvas.width - 5, context.canvas.height * 0.3),
            // new CanvasWhiteboardPoint(context.canvas.width * 0.4, context.canvas.height * 0.6),
            new CanvasWhiteboardPoint(context.canvas.width * 0.2, context.canvas.height * 0.4),
            new CanvasWhiteboardPoint(context.canvas.width * 0.6, context.canvas.height * 0.8),
            new CanvasWhiteboardPoint(context.canvas.width, context.canvas.height)
        ];
        this.draw(context);
    }
    onUpdateReceived(update) {
        this.linePositions.push(new CanvasWhiteboardPoint(update.x, update.y));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlZS1oYW5kLXNoYXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmcyLWNhbnZhcy13aGl0ZWJvYXJkL3NyYy9saWIvc2hhcGVzL2ZyZWUtaGFuZC1zaGFwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUd6RSxNQUFNLE9BQU8sYUFBYyxTQUFRLHFCQUFxQjtJQUd0RCxZQUFZLGFBQXFDLEVBQUUsT0FBc0M7UUFDdkYsS0FBSyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsWUFBWTtRQUNWLE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBaUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXJDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNwQixPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0QsYUFBYTtRQUNiLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRW5FLG1DQUFtQztRQUNuQyxpREFBaUQ7UUFDakQsc0RBQXNEO1FBQ3RELE1BQU07UUFFTiwyQkFBMkI7UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDcEMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNyQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDaEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzNDLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsRUFDbkMsYUFBYSxDQUFDLENBQUMsRUFDZixhQUFhLENBQUMsQ0FBQyxFQUNmLGFBQWEsQ0FBQyxDQUFDLEVBQ2YsUUFBUSxDQUFDLENBQUMsRUFDVixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNSO2lCQUFNO2dCQUNMLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNDLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQy9DLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDUjtTQUNGO1FBRUQsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBaUM7UUFDM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLHFCQUFxQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLElBQUkscUJBQXFCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNoRixzRkFBc0Y7WUFDdEYsSUFBSSxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1lBQ2xGLElBQUkscUJBQXFCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNsRixJQUFJLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQ3ZFLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxNQUE4QjtRQUM3QyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FudmFzV2hpdGVib2FyZFNoYXBlIH0gZnJvbSAnLi9jYW52YXMtd2hpdGVib2FyZC1zaGFwZSc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkU2hhcGVPcHRpb25zIH0gZnJvbSAnLi9jYW52YXMtd2hpdGVib2FyZC1zaGFwZS1vcHRpb25zJztcbmltcG9ydCB7IENhbnZhc1doaXRlYm9hcmRQb2ludCB9IGZyb20gJy4uL2NhbnZhcy13aGl0ZWJvYXJkLXBvaW50Lm1vZGVsJztcbmltcG9ydCB7IENhbnZhc1doaXRlYm9hcmRVcGRhdGUgfSBmcm9tICcuLi9jYW52YXMtd2hpdGVib2FyZC11cGRhdGUubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgRnJlZUhhbmRTaGFwZSBleHRlbmRzIENhbnZhc1doaXRlYm9hcmRTaGFwZSB7XG4gIGxpbmVQb3NpdGlvbnM6IENhbnZhc1doaXRlYm9hcmRQb2ludFtdO1xuXG4gIGNvbnN0cnVjdG9yKHBvc2l0aW9uUG9pbnQ/OiBDYW52YXNXaGl0ZWJvYXJkUG9pbnQsIG9wdGlvbnM/OiBDYW52YXNXaGl0ZWJvYXJkU2hhcGVPcHRpb25zKSB7XG4gICAgc3VwZXIocG9zaXRpb25Qb2ludCwgb3B0aW9ucyk7XG4gICAgdGhpcy5saW5lUG9zaXRpb25zID0gW107XG4gIH1cblxuICBnZXRTaGFwZU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ0ZyZWVIYW5kU2hhcGUnO1xuICB9XG5cbiAgZHJhdyhjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHRoaXMub3B0aW9ucyk7XG5cbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgIGNvbnRleHQubW92ZVRvKHRoaXMucG9zaXRpb25Qb2ludC54LCB0aGlzLnBvc2l0aW9uUG9pbnQueSk7XG4gICAgLy8gRHJhdyBhIGRvdFxuICAgIGNvbnRleHQubGluZVRvKHRoaXMucG9zaXRpb25Qb2ludC54ICsgMSwgdGhpcy5wb3NpdGlvblBvaW50LnkgKyAxKTtcblxuICAgIC8vIE5vcm1hbCBmYXN0ZXN0IGZyZWUgaGFuZCBkcmF3aW5nXG4gICAgLy8gdGhpcy5saW5lUG9zaXRpb25zLmZvckVhY2goKGxpbmVQb3NpdGlvbikgPT4ge1xuICAgIC8vICAgICBjb250ZXh0LmxpbmVUbyhsaW5lUG9zaXRpb24ueCwgbGluZVBvc2l0aW9uLnkpO1xuICAgIC8vIH0pO1xuXG4gICAgLy8gUXVhZHJhdGljIGN1cnZlcyBkcmF3aW5nXG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgdGhpcy5saW5lUG9zaXRpb25zLmxlbmd0aCkge1xuICAgICAgaWYgKHRoaXMubGluZVBvc2l0aW9ucy5sZW5ndGggLSBpID4gMikge1xuICAgICAgICBjb25zdCBjb250cm9sUG9pbnQxID0gdGhpcy5saW5lUG9zaXRpb25zW2ldO1xuICAgICAgICBjb25zdCBjb250cm9sUG9pbnQyID0gdGhpcy5saW5lUG9zaXRpb25zW2kgKyAxXTtcbiAgICAgICAgY29uc3QgZW5kUG9pbnQgPSB0aGlzLmxpbmVQb3NpdGlvbnNbaSArIDJdO1xuICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oY29udHJvbFBvaW50MS54LFxuICAgICAgICAgIGNvbnRyb2xQb2ludDEueSxcbiAgICAgICAgICBjb250cm9sUG9pbnQyLngsXG4gICAgICAgICAgY29udHJvbFBvaW50Mi55LFxuICAgICAgICAgIGVuZFBvaW50LngsXG4gICAgICAgICAgZW5kUG9pbnQueSk7XG4gICAgICAgIGkgKz0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGxpbmVQb3NpdGlvbiA9IHRoaXMubGluZVBvc2l0aW9uc1tpXTtcbiAgICAgICAgY29udGV4dC5saW5lVG8obGluZVBvc2l0aW9uLngsIGxpbmVQb3NpdGlvbi55KTtcbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gIH1cblxuICBkcmF3UHJldmlldyhjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcbiAgICB0aGlzLnBvc2l0aW9uUG9pbnQgPSBuZXcgQ2FudmFzV2hpdGVib2FyZFBvaW50KDIsIDIpO1xuICAgIHRoaXMubGluZVBvc2l0aW9ucyA9IFtcbiAgICAgIG5ldyBDYW52YXNXaGl0ZWJvYXJkUG9pbnQoY29udGV4dC5jYW52YXMud2lkdGggLSA1LCBjb250ZXh0LmNhbnZhcy5oZWlnaHQgKiAwLjMpLFxuICAgICAgLy8gbmV3IENhbnZhc1doaXRlYm9hcmRQb2ludChjb250ZXh0LmNhbnZhcy53aWR0aCAqIDAuNCwgY29udGV4dC5jYW52YXMuaGVpZ2h0ICogMC42KSxcbiAgICAgIG5ldyBDYW52YXNXaGl0ZWJvYXJkUG9pbnQoY29udGV4dC5jYW52YXMud2lkdGggKiAwLjIsIGNvbnRleHQuY2FudmFzLmhlaWdodCAqIDAuNCksXG4gICAgICBuZXcgQ2FudmFzV2hpdGVib2FyZFBvaW50KGNvbnRleHQuY2FudmFzLndpZHRoICogMC42LCBjb250ZXh0LmNhbnZhcy5oZWlnaHQgKiAwLjgpLFxuICAgICAgbmV3IENhbnZhc1doaXRlYm9hcmRQb2ludChjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuICAgIF07XG5cbiAgICB0aGlzLmRyYXcoY29udGV4dCk7XG4gIH1cblxuICBvblVwZGF0ZVJlY2VpdmVkKHVwZGF0ZTogQ2FudmFzV2hpdGVib2FyZFVwZGF0ZSk6IHZvaWQge1xuICAgIHRoaXMubGluZVBvc2l0aW9ucy5wdXNoKG5ldyBDYW52YXNXaGl0ZWJvYXJkUG9pbnQodXBkYXRlLngsIHVwZGF0ZS55KSk7XG4gIH1cbn1cbiJdfQ==