import { CanvasWhiteboardShape } from './canvas-whiteboard-shape';
import { CanvasWhiteboardPoint } from '../canvas-whiteboard-point.model';
export class LineShape extends CanvasWhiteboardShape {
    constructor(positionPoint, options, endPosition) {
        super(positionPoint, options);
        this.endPosition = endPosition || new CanvasWhiteboardPoint(this.positionPoint.x, this.positionPoint.y);
    }
    getShapeName() {
        return 'LineShape';
    }
    draw(context) {
        if (!this.endPosition) {
            return;
        }
        context.beginPath();
        Object.assign(context, this.options);
        context.moveTo(this.positionPoint.x, this.positionPoint.y);
        context.lineTo(this.endPosition.x, this.endPosition.y);
        context.closePath();
        context.stroke();
    }
    drawPreview(context) {
        this.positionPoint = new CanvasWhiteboardPoint(0, 0);
        this.endPosition = new CanvasWhiteboardPoint(context.canvas.width, context.canvas.height);
        this.draw(context);
    }
    onUpdateReceived(update) {
        this.endPosition = new CanvasWhiteboardPoint(update.x, update.y);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS1zaGFwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1jYW52YXMtd2hpdGVib2FyZC9zcmMvbGliL3NoYXBlcy9saW5lLXNoYXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBR3pFLE1BQU0sT0FBTyxTQUFVLFNBQVEscUJBQXFCO0lBR2xELFlBQVksYUFBcUMsRUFDckMsT0FBc0MsRUFDdEMsV0FBbUM7UUFDN0MsS0FBSyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsSUFBSSxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUcsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQWlDO1FBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE9BQU87U0FDUjtRQUNELE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNwQixNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFckMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNELE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV2RCxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDcEIsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBaUM7UUFDM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLHFCQUFxQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUkscUJBQXFCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxRixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxNQUE4QjtRQUM3QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUkscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FudmFzV2hpdGVib2FyZFNoYXBlIH0gZnJvbSAnLi9jYW52YXMtd2hpdGVib2FyZC1zaGFwZSc7XG5pbXBvcnQgeyBDYW52YXNXaGl0ZWJvYXJkU2hhcGVPcHRpb25zIH0gZnJvbSAnLi9jYW52YXMtd2hpdGVib2FyZC1zaGFwZS1vcHRpb25zJztcbmltcG9ydCB7IENhbnZhc1doaXRlYm9hcmRQb2ludCB9IGZyb20gJy4uL2NhbnZhcy13aGl0ZWJvYXJkLXBvaW50Lm1vZGVsJztcbmltcG9ydCB7IENhbnZhc1doaXRlYm9hcmRVcGRhdGUgfSBmcm9tICcuLi9jYW52YXMtd2hpdGVib2FyZC11cGRhdGUubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgTGluZVNoYXBlIGV4dGVuZHMgQ2FudmFzV2hpdGVib2FyZFNoYXBlIHtcbiAgZW5kUG9zaXRpb246IENhbnZhc1doaXRlYm9hcmRQb2ludDtcblxuICBjb25zdHJ1Y3Rvcihwb3NpdGlvblBvaW50PzogQ2FudmFzV2hpdGVib2FyZFBvaW50LFxuICAgICAgICAgICAgICBvcHRpb25zPzogQ2FudmFzV2hpdGVib2FyZFNoYXBlT3B0aW9ucyxcbiAgICAgICAgICAgICAgZW5kUG9zaXRpb24/OiBDYW52YXNXaGl0ZWJvYXJkUG9pbnQpIHtcbiAgICBzdXBlcihwb3NpdGlvblBvaW50LCBvcHRpb25zKTtcbiAgICB0aGlzLmVuZFBvc2l0aW9uID0gZW5kUG9zaXRpb24gfHwgbmV3IENhbnZhc1doaXRlYm9hcmRQb2ludCh0aGlzLnBvc2l0aW9uUG9pbnQueCwgdGhpcy5wb3NpdGlvblBvaW50LnkpO1xuICB9XG5cbiAgZ2V0U2hhcGVOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdMaW5lU2hhcGUnO1xuICB9XG5cbiAgZHJhdyhjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZW5kUG9zaXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHRoaXMub3B0aW9ucyk7XG5cbiAgICBjb250ZXh0Lm1vdmVUbyh0aGlzLnBvc2l0aW9uUG9pbnQueCwgdGhpcy5wb3NpdGlvblBvaW50LnkpO1xuICAgIGNvbnRleHQubGluZVRvKHRoaXMuZW5kUG9zaXRpb24ueCwgdGhpcy5lbmRQb3NpdGlvbi55KTtcblxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgY29udGV4dC5zdHJva2UoKTtcbiAgfVxuXG4gIGRyYXdQcmV2aWV3KGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xuICAgIHRoaXMucG9zaXRpb25Qb2ludCA9IG5ldyBDYW52YXNXaGl0ZWJvYXJkUG9pbnQoMCwgMCk7XG4gICAgdGhpcy5lbmRQb3NpdGlvbiA9IG5ldyBDYW52YXNXaGl0ZWJvYXJkUG9pbnQoY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodCk7XG4gICAgdGhpcy5kcmF3KGNvbnRleHQpO1xuICB9XG5cbiAgb25VcGRhdGVSZWNlaXZlZCh1cGRhdGU6IENhbnZhc1doaXRlYm9hcmRVcGRhdGUpOiB2b2lkIHtcbiAgICB0aGlzLmVuZFBvc2l0aW9uID0gbmV3IENhbnZhc1doaXRlYm9hcmRQb2ludCh1cGRhdGUueCwgdXBkYXRlLnkpO1xuICB9XG59XG4iXX0=